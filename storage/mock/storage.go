// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storagemock is a generated GoMock package.
package storagemock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/vstdy0/go-project/model"
)

// MockURLStorage is a mock of URLStorage interface.
type MockURLStorage struct {
	ctrl     *gomock.Controller
	recorder *MockURLStorageMockRecorder
}

// MockURLStorageMockRecorder is the mock recorder for MockURLStorage.
type MockURLStorageMockRecorder struct {
	mock *MockURLStorage
}

// NewMockURLStorage creates a new mock instance.
func NewMockURLStorage(ctrl *gomock.Controller) *MockURLStorage {
	mock := &MockURLStorage{ctrl: ctrl}
	mock.recorder = &MockURLStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLStorage) EXPECT() *MockURLStorageMockRecorder {
	return m.recorder
}

// AddURLs mocks base method.
func (m *MockURLStorage) AddURLs(ctx context.Context, objs []model.URL) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddURLs", ctx, objs)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddURLs indicates an expected call of AddURLs.
func (mr *MockURLStorageMockRecorder) AddURLs(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddURLs", reflect.TypeOf((*MockURLStorage)(nil).AddURLs), ctx, objs)
}

// Close mocks base method.
func (m *MockURLStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockURLStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockURLStorage)(nil).Close))
}

// GetURL mocks base method.
func (m *MockURLStorage) GetURL(ctx context.Context, urlID int) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, urlID)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockURLStorageMockRecorder) GetURL(ctx, urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLStorage)(nil).GetURL), ctx, urlID)
}

// GetUserURLs mocks base method.
func (m *MockURLStorage) GetUserURLs(ctx context.Context, userID uuid.UUID) ([]model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLs", ctx, userID)
	ret0, _ := ret[0].([]model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLs indicates an expected call of GetUserURLs.
func (mr *MockURLStorageMockRecorder) GetUserURLs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLs", reflect.TypeOf((*MockURLStorage)(nil).GetUserURLs), ctx, userID)
}

// HasURL mocks base method.
func (m *MockURLStorage) HasURL(ctx context.Context, urlID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasURL", ctx, urlID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasURL indicates an expected call of HasURL.
func (mr *MockURLStorageMockRecorder) HasURL(ctx, urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasURL", reflect.TypeOf((*MockURLStorage)(nil).HasURL), ctx, urlID)
}

// Ping mocks base method.
func (m *MockURLStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ping", reflect.TypeOf((*MockURLStorage)(nil).Ping))
}

// RemoveUserURLs mocks base method.
func (m *MockURLStorage) RemoveUserURLs(ctx context.Context, objs []model.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserURLs", ctx, objs)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserURLs indicates an expected call of RemoveUserURLs.
func (mr *MockURLStorageMockRecorder) RemoveUserURLs(ctx, objs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserURLs", reflect.TypeOf((*MockURLStorage)(nil).RemoveUserURLs), ctx, objs)
}
